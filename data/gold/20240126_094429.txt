 Nicht, wenn wir das nicht einhalten. Das ist uns ja schon aufgefallen, dass du, wenn du den Linter gelaufen lassen hast, dass der quasi alle Dateien überarbeitet hat. Und normalerweise würde die Bild-Type-Line da schon brechen, weil wir halt die Zeilenlänge überstreiten, nur die zulässige. So, das heißt, eigentlich wollten wir in diesem Ticket mit der Nummer... Jetzt habe ich es gerade nicht. Moment, ich gucke gerade. Müs müsste im Backlog sein, oder? Ja, im Backlog, genau. Ich hab hier so eine Security-Hotspot, 10.7.30. Ne, die 11.27. 11.27, Moment. Ah ja, Kurzqualität prüfen im Herstellen. Genau, so. Das heißt, momentan ist es so, dass in der GitLab CI-PyML quasi ein Poetry-Skript aufgerufen wird, also das Poetry-Skript, da werden die Linter-Ergebnisse nicht zurückgespiegelt und das führt dazu, dass zwar das Linting ausgeführt wird, aber halt wie gesagt, wie wir das bisher ignoriert hatten. So, das heißt, ein Teil der Aufgabe wäre es halt, einmal die GitLab CI an einer Stelle anzupassen, zumindest für die Python-Projekte, die wir haben und da einmal den Linter so zu konfigurieren, dass quasi das Ergebnis des Lintings halt dazu führt, dass der Bild bricht, wenn es nicht korrekt ist. Und im Zuge dessen würde ich das ganz gerne auch auf unterschiedliche Jobs aufteilen. Also es ist momentan ja so, dass die Linter, dass es nur ein Linter Skript gibt und das ruft halt Pylint, Black, Iceford und MyPi auf und die würde ich einfach in unterschiedliche Jobs packen, die dann halt auch unterschiedlich fällen können. Also da muss halt einfach nur auf Skript-Ebene quasi das Ergebnis zurückgegeben werden. Entweder als Exception, weil es halt ein Check-Subprozess ist, der aufgerufen wird, oder halt den Return-Status-Code, wenn der ungleich Null ist, dann würde der Job an der Stelle aufbrechen. So, das wäre quasi der erste Schritt. Ja, kurz eine Frage dazu, also in Poetry Scripts dann schon die Subprozesse trennen voneinander, damit ich es gezielt aufrufen kann. Ja, ja, genau. Das wäre quasi der erste Schritt. Das würde ich aber auch erstmal nur in einem Branch machen und dann innerhalb des selben Branches soll dann halt die Pipeline laufen und dann geht es halt darum, dass man dann halt einmal sukzessive diese Fehler trivial löst. Also im Zweifel, dass man einmal einen Linter fix laufen lässt oder wenn es dann halt irgendwie tatsächlich nur Zahlenumbrüche sind oder keine Ahnung was, dass wir dann halt mal gucken. Je nachdem, wenn die zu umfangreich sind, die Änderungen oder die Probleme, die da an der Stelle auftreten, dann müssten wir da gegebenenfalls Tickets draus generieren. Ja, also wenn es einfache Sachen sind, einfach lösen. Wenn es zu kompliziert ist, müssten wir eigentlich mal gucken, dass wir ein Ticket dazu lösen beziehungsweise sonst kriegen wir wahrscheinlich die Palpline ja nicht währends Rennen. Das heißt, eigentlich müssen wir es ja lösen. Ich habe aber aktuell keine Vorstellung davon, wie umfangreich das sein wird. ja nicht werden das heißt eigentlich müssen wir ja lösen aktuell keine keine vorstellung davon wie wie umfangreich also deswegen wäre jetzt halt erstmal der erste schritt hat sich die pipeline anzupassen und dann einmal sich einen überblick zu verschaffen wie viel wie viel aufwand das tatsächlich ist und Und genau, wenn es zu krass ist, dann müssten wir dann halt überlegen. Aber das kann ich mir eigentlich nicht vorstellen. Nee, wir müssen es auf jeden Fall lösen. Und für welchen Repos reden wir da? Management Service? Und? Auf jeden Fall dem BoomUp Service Lib. Dem Management Service. Eigentlich Auf jeden Fall dem BoomUp Service Lib, dem Management Service. Eigentlich auch der Home-Server-Config, weil das auf jeden Fall ja früher oder später auch nochmal kommen wird, aber das könnten wir jetzt im ersten Schritt vernachlässigen, weil wir es jetzt ordentlich nach OpenCode schicken. Deswegen würde ich es vielleicht auch so ausvorlassen an der Stelle. Genau, und dann die Frontend-Geschichten. Da müsste man jetzt halt eigentlich nochmal mit den Kollegen Rücksprache halten, was sie eigentlich noch an Themen haben. Ja, ob die Linter und so weiter und so fort, ob die diese Dinge alle schon eingehalten haben. Beziehungsweise dann müsste man halt auch mal draufschauen. Aber da gab es ja ein anderes Ticket mit dem Security Hotspot. Das ist ja gerade schon vorgelesen, was dann aus dem Sonar Cube kommt. Genau, da können wir einmal in den Sonar Cube reingucken. Bei unseren Services habe ich da immer wieder reingeguckt und das sah eigentlich immer gut aus. Deswegen glaube ich, wäre jetzt tatsächlich der erste Schritt, einfach nur das Linting auslaufen zu kriegen. Genau, und das einmal zu korrigieren. Und für die Backend-Services, genau, und dann könnten wir im selben Schritt, könnte man sich jetzt nochmal angucken, es ist halt so, dass das GitLab CI momentan vor jedem Run quasi eine Poetry-Installation macht. Das würde ich gerne rausnehmen und dass wir einfach nur dieses Environment, das VN verzeichnet, dass wir das dann halt zwischen den Jobs sharen. Ähnlich wie das Frontend das macht. Damit wir da an der Stelle nicht immer eine Installation mit drin haben, das führt einfach zu langen Laufzeiten, die wir nicht brauchen. Okay, damit ich es verstehen kann, das heißt, es wird einmal für alle Jobs am Anfang erstmal installiert und dann wird es gar nicht mehr neu installiert, sondern einfach wieder benutzt. Genau. Ah, okay, verstehe. Das heißt, du würdest eine Installphase, einen Installjob implementieren im GitLab CI, wo dann halt die Installation von den Abhängigkeiten stattfindet und dann würdest du als Part dieses Installationsverzeichnis an die anderen Jobs übergeben und dann können die das nutzen. Aha, okay, super, dann mache ich das so. Dann finde ich jetzt erstmal den Aufwand heraus und dokumentiere dann direkt im Ticket. Genau, super, dann mache ich das so. Dann finde ich jetzt erstmal den Aufwand heraus und dokumentiere dann direkt dem Ticket. Genau, super. Und ich weiß nicht, wird dem Ticket, gibt ihm eine 5, weil es halt unbekannt ist. Ich bin mir jetzt noch nicht ganz sicher, was mit dem Frontend ist. Vielleicht kann man auch gerade den Nick noch dazu nehmen. Dann kann man ja nochmal fragen, was der da sieht. Ja, ich probiere gerade mal was aus Ich bin da, ja. So, Teilnehmer einladen. Probier's mal aus. Ja, ich bin noch da? Ja. Ja. Der ist noch in einem anderen Chor. Ja. Der ist noch in einem anderen Call. Genau. Dann dann lassen wir uns gerade noch mal schauen, was wir aus der Pipeline selber ableiten können. Also ich gehe mal gerade auf die Pipeline von denen. Mache ich auch mal. auf die pipeline und den mach ich auch mal wo starten wir boom app oder ja lass mal boom app starten ok moment boom app codes bild pipeline BoomUpApp, Code, Bildpipeline. Das letzte Mal war ein Image not found. Gibt es da wieder ein Problem beim Pullen? Letzte Mal Image not found. Ja, das allerletzte. Gestern von Jürgen hat er irgendwas gemacht. Ja, das ist schon wieder hier dieses Proxy-Problem. Image not found. Proxy Problem Und Found Das ist glaube ich wenn diese Win Specified Polyvisties Always Error Ausbunden des anderen Artefaktes Irgendwas ist da wieder mit dem Proxy nicht richtig Ah da muss man sich nochmal aufschreiben was der Fehler bedeutet Kann ich mir nicht merken. Egal, aber wenn wir uns heute den letzten Develop-Bild mal anschauen. Zwei Tage her sollte das sein. Setup. Immer noch Loading-Bild. V-Test. immer noch loading bild wie test sind prätier lindt typescript So, der erste sieht gut aus, Lin-Type-Script. Was heißt das? Weißt du, was das minus no emit macht? Wo bist du gerade? In dem Lint-Type-Script-Job. Also ich bin auf die Develop-Pipeline gegangen und bin gerade die Linter-Ergebnisse mal an. Die sehen aber soweit erstmal gut aus. Es kann schon sein, dass sie im Frontend da an der Stelle einfach schon weiter waren oder weiter sind, weil der Nick da mehr Augenmerk drauf gelegt hatte. Die laufen alle durch, oder? Ja, die laufen alle durch, aber die laufen ja bei uns auch durch. Die Frage ist, haben die das an der Stelle auch korrekt ausgewertet? Also, dass quasi der Return-Code an die Pipeline zurückgegeben wird. Wenn der Return-Code nicht an die Pipeline gegeben wird, das ist ja das, was wir momentan in unserem Skript haben, das Problem, dann bricht auch die Pipeline nicht und dann läuft auch die Pipeline durch. Mhm. So, aber das ich komm grad dieses no emit seh ich jetzt auch grad Do not emit compiler output files. Also Source Maps werden da nicht generiert. Das ist wie so ein Mapping von TypeScript auf JavaScript. Output Files. Und AutoCompletion hat das glaube ich auch mit zu tun für die IDE. Gut, dann sieht das erstmal gut aus. So, Sonar Cube läuft. Was auch immer die Ergebnisse sind, da würde ich jetzt mal kurz drauf gucken. So, das sieht ja mittlerweile so aus. Sind auf jeden Fall 10 Codesmails aufräumen. Also das heißt, Linter sind erstmal ok, SonarCube, da gibt es Codesmails. Das sieht jetzt wie das im Overall-Code sieht, da sind so 10 Stück angekreidet. Ich würde mir jetzt gerade überlegen, ob wir die schon angehen sollen oder ob wir die in angehen sollen oder würde ich einen separaten Task machen? Ich würde einen separaten Task nehmen. Ja, ich glaube auch. Ja, okay. Dann würde ich mich tatsächlich in dem Ticket darauf beschränken, dass wir jetzt halt für die Python-Services erstmal die Pipeline fixen und also sprich, dass wenn halt die Linting-Regeln gebrochen werden, dass die Pipeline bricht und dass wir das, was jetzt aktuell zum Bruch führt, dass wir das korrigieren. Dann lassen wir das Frontend erstmal aus dem Vorhang erstellen. Ja, okay. Das heißt, das FI kannst du wegnehmen aus dem Ticket, dann kannst du bitte noch ergänzen, dass die Installation als eigener Job genutzt werden soll und die Artefakte dann an die anderen Jobs übergeben wird und dass die Linting-Prozesse eigenständige Jobs sind innerhalb der CSD-Partner. Ja, werde ich dann dokumentieren. Genau, und dass dann halt die Linting-Verletzungen, dass die dann halt wieder repariert werden sollten. Mhm. Was würdest du dem geben? Als Schätzung? Ich dachte zwischen 3 und 5. Tendierst du eher zu 3 oder eher zu 5? Ja, also da ich kann es irgendwie tatsächlich nicht abschätzen, wie kompliziert es ist, die Sachen da zu fixen, wenn es dann wirklich nur ein Fixlauf ist. Dann wäre es wahrscheinlich tatsächlich eine 3. Ich glaube ich würde eher zu einer 3 kippen. Ok, dann trage ich mal die 3 ein und dann dokumentiere ich gleich noch. Ok, super, perfekt. Aber genau, dann vielleicht eher, ich weiß nicht in welche Reihenfolge jetzt, sonst du kondimentierst das erstmal, denk immer bitte daran, dass wir den Commit fertig kriegen, den Coach Review. MR, ja. Den MR, genau, damit die Kollegen dann ihr Ticket fertig machen können. Das mache ich jetzt als erstes. Ja, super. Gut. Alles klar, ich gebe dir dann gleich Bescheid. Bis später. Ja. Ciao.